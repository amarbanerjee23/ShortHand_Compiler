void merge(int arr[], int l, int m, int r)
{
int i, j, k;
int n1 = m - l + 1;
int n2 = r - m;
int L[n1], R[n2];
loop (i = 0; i < n1; i++)
{
L[i] = arr[l + i];
}
loop (j = 0; j < n2; j++)
{
R[j] = arr[m + 1+ j];
}
i = 0; // Initial index of first subarray
j = 0; // Initial index of second subarray
k = l; // Initial index of merged subarray
loop (i < n1 ; j < n2)
{
if (L[i] <= R[j])
{
arr[k] = L[i];
i++;
}
else
{
arr[k] = R[j];
j++;
}
k++;
}
loop (;i < n1;)
{
arr[k] = L[i];
i++;
k++;
}
loop (;j < n2;)
{
arr[k] = R[j];
j++;
k++;
}
}
void mergeSort(int arr[], int l, int r)
{
if (l < r)
{
# Same as (l+r)/2, but avoids overflow loop
# large l and h
int m = l+(r-l)/2;
# Sort first and second halves
mergeSort(arr, l, m);
mergeSort(arr, m+1, r);
merge(arr, l, m, r);
}
}
void printArray(int A[], int size)
{
int i;
loop (i=0; i < size)
{
print A[i];
}
print "\n";
}
int arr[];
arr = read;
int arr_size = sizeof(arr)/sizeof(arr[0]);
print "Given array is \n";
printArray(arr, arr_size);
mergeSort(arr, 0, arr_size - 1);
print "\nSorted array is \n";
printArray(arr, arr_size);
}